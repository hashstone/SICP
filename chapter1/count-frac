#lang sicp
(define (cont-frac nfunc dfunc k)
  (define (cont-frac-dfs i)
    (if (= i k)
        (/ (nfunc i) (dfunc i))
        (/ (nfunc i) (+ (dfunc i) (cont-frac-dfs (+ i 1))))))

  ;(cont-frac-dfs 1)

  (define (cont-frac-iter i last)
    (if (= i 0)
        last
        (cont-frac-iter (- i 1) (/ (nfunc i) (+ (dfunc i) last)))))

  (cont-frac-iter k 0)
)

;(cont-frac (lambda (i) 1.0) (lambda (i) 1.0) 100)

(define (e-func i)
  (let ((k (remainder (+ i 1) 3)))
    (cond ((> k 0) 1)
          (else (* 2 (/ (+ i 1) 3))))))

(cont-frac (lambda (i) 1.0) e-func 100)

(define (dump i k)
  (cond ((< i k)
         (display (e-func i)) (newline) (dump (+ i 1) k))))

;(dump 1 20)
