#lang sicp
;(define (runtime) (current-inexact-milliseconds)) ; adapting to DrRacket

(define (prime? n)
  (define (square x)
    (* x x))
  
  (define (divides? a b)
    (= (remainder b a) 0))

  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))

  (define (smallest-divisor n)
    (find-divisor n 2))
  
  (= n (smallest-divisor n))
)
 
(define (search-for-primes lo hi n)

  (define (timed-prime-test n)
    (newline)
    (display n)
    (start-prime-test n (runtime)))

  (define (start-prime-test n start-time)
    (cond ((prime? n) (report-prime (- (runtime) start-time)) #t)
          (else #f)))

  (define (report-prime elapsed-time)
    (display " *** ")
    (display elapsed-time))

  (define (search-iter lo hi i)
    (cond ((> lo hi) (newline) (display "==== finished"))
          ((= i n) (newline) (display "==== finished"))
          ((timed-prime-test lo) (search-iter (+ lo 1) hi (+ i 1)))
          (else (search-iter (+ lo 1) hi i))))

  (search-iter lo hi 0)
)

(search-for-primes 100 1000 20)
;(search-for-primes 1000 10000 3)
;(search-for-primes 10000 100000 3)
;(search-for-primes 100000 1000000 3)
;(search-for-primes 1000000 10000000 3)
