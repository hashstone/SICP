#lang sicp
(define tolerance 0.000001)

(define (close-enough? guess next)
  (< (abs (- guess next)) tolerance))

(define (fixed-point f guess)
  (define (try-with guess)
    ;(display guess)
    ;(newline)
    (let ((next (f guess)))
    (if (close-enough? guess next)
        next
        (try-with next))))

  (try-with guess)
)

(define dx 0.00001)

(define (deriv g)
  (lambda (x)
    (/ (- (g (+ x dx)) (g x)) dx)))

(define (average a b)
  (/ (+ a b) 2))

(define (square x)
  (* x x))

(define (cube x)
  (* x x x))

(define (average-damp f)
  (lambda (x) (average x (f x))))

;((average-damp square) 10)

(define (newton-transform g)
  (lambda (x)
    (- x (/ (g x) ((deriv g) x)))))

(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))

(define (fixed-point-of-tansform g transform guess)
  (fixed-point (transform g) guess))

; fix-point of y = x / y, x is already known (parameter)
(define (sqrt-1 x)
  (fixed-point-of-tansform (lambda (y) (/ x y))
                           average-damp
                           1.0))

; zero-point of g(x) = y^2 - x
; fix-point of newton-method(g(x))
; using newton-method, x(n+1) = x(n) - g(x(n)) / g'(x(n))
(define (sqrt-2 x)
  (fixed-point-of-tansform (lambda (y) (- (square y) x))
                           newton-transform
                           1.0))

(sqrt-1 3)
(sqrt-2 3)


;;; 1.40
(define (cubic a b c)
  (lambda (x) (+
               (cube x)
               (* a (square x))
               (* b x)
               c)))

(newtons-method (cubic 1 1 1) 2)

;;; 1.41
(define (double f)
  (lambda (x) (f (f x))))

(define (inc x)
  (+ x 1))

((double square) 2)
((double inc) 1)
(newline)

;;; 1.42
(define (compose f g)
  (lambda (x) (f (g x))))

((compose inc square) 4)
(newline)

;;; 1.43
;(define (repeated f n)
;  (define (repeated-iter g i)
;    (if (= i 1)
;        g
;        (repeated-iter (compose f g) (- i 1))))
;  (lambda (x) ((repeated-iter f n) x)))

(define (repeated f n)
  (define (iter g i)
    (if (= i 1)
        g
        (iter (lambda (x) (f (g x))) (- i 1))))
  (iter f n))

((repeated square 2) 5)
((repeated inc 102) 5)
(newline)

;;; 1.44
(define (smooth f)
  (lambda (x) (/ (+ (f (- x dx))
                    (f x)
                    (f (+ x dx)))
                 3)))

((smooth square) 5)
(((repeated smooth 3) square) 19)
(newline)

;;; 1.45


;;; 1.46
(define (iter-improve good-enough? improve)
  (define (iter guess)
    (let ((next (improve guess)))
      (if (good-enough? guess next)
          guess
          (iter next))))
  (lambda (x) (iter x)))

(define (fixed-point-ii f guess)
  ((iter-improve close-enough? f) guess)
)

(fixed-point cos 1.0)
(fixed-point-ii cos 1.0)
